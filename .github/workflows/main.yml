name: main

on: [push, pull_request]

concurrency: 
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test-conda:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
          auto-update-conda: true
          channels: conda-forge,defaults
          channel-priority: true
          python-version: "3.8"
      - name: "Install Windows-Mesa OpenGL DLL"
        if: runner.os == 'Windows'
        run: |
          curl -LJO https://github.com/pal1000/mesa-dist-win/releases/download/19.2.7/mesa3d-19.2.7-release-msvc.7z
          7z x mesa3d-19.2.7-release-msvc.7z
          cd x64
          xcopy opengl32.dll C:\windows\system32\mesadrv.dll*
          xcopy opengl32.dll C:\windows\syswow64\mesadrv.dll*
          REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\OpenGLDrivers\MSOGL" /v DLL /t REG_SZ /d "mesadrv.dll" /f
          REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\OpenGLDrivers\MSOGL" /v DriverVersion /t REG_DWORD /d 1 /f
          REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\OpenGLDrivers\MSOGL" /v Flags /t REG_DWORD /d 1 /f
          REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\OpenGLDrivers\MSOGL" /v Version /t REG_DWORD /d 2 /f
          REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\OpenGLDrivers\MSOGL" /v DLL /t REG_SZ /d "mesadrv.dll" /f
          REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\OpenGLDrivers\MSOGL" /v DriverVersion /t REG_DWORD /d 1 /f
          REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\OpenGLDrivers\MSOGL" /v Flags /t REG_DWORD /d 1 /f 
          REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\OpenGLDrivers\MSOGL" /v Version /t REG_DWORD /d 2 /f 
        shell: cmd
      - name: Install Dependencies
        run: |
          conda install pyside2 numpy scipy pip pytest
          pip install pytest-xdist
        shell: bash -l {0}
      - name: "Install Linux VirtualDisplay"
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            libxkbcommon-x11-0 \
            x11-utils \
            libyaml-dev \
            libegl1-mesa \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-xinerama0 \
            libopengl0
          pip install pytest-xvfb
        shell: bash -l {0}
      - name: 'Debug Info'
        run: |
          echo python location: `which python`
          echo python version: `python --version`
          echo pytest location: `which pytest`
          echo installed packages
          conda list
          pip list
          echo pyqtgraph system info
          python -c "import pyqtgraph as pg; pg.systemInfo()"
        shell: bash -l {0}
        env:
          QT_DEBUG_PLUGINS: 1
      - name: 'XVFB Display Info'
        run: |
          xvfb-run --server-args="-screen 0, 1920x1200x24 -ac +extension GLX +render -noreset" python -m pyqtgraph.util.glinfo
          xvfb-run --server-args="-screen 0, 1920x1200x24 -ac +extension GLX +render -noreset" python -m pyqtgraph.util.get_resolution
        if: runner.os == 'Linux'
        shell: bash -l {0}
      - name: 'Display Info'
        run: |
          python -m pyqtgraph.util.glinfo
          python -m pyqtgraph.util.get_resolution
        if: runner.os != 'Linux'
        shell: bash -l {0}
      - name: Run Tests
        run: |
          mkdir $SCREENSHOT_DIR
          pytest tests -v
        shell: bash -l {0}
        env:
          SCREENSHOT_DIR: ./screenshots
