# Azure Pipelines CI job template for PyDM Tests
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/anaconda?view=azure-devops
parameters:
  name: ''
  vmImage: ''

jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      Python27-Qt4:
        python.version: '2.7'
        install.method: "conda"
        qt.bindings: "pyqt=4"
      Python27-PySide:
        python.version: '2.7'
        qt.bindings: "pyside"
        install.method: "conda"
      Python37-PyQt-5.9:
        python.version: "3.7"
        qt.bindings: "pyqt"
        install.method: "conda"
      Python37-PySide2-5.6:
        python.version: "3.7"
        qt.bindings: "pyside2"
        install.method: "conda"
      Python37-PyQt-5.12:
        python.version: '3.7'
        qt.bindings: "PyQt5"
        install.method: "pip"
      Python37-PySide2-5.12:
        python.version: "3.7"
        qt.bindings: "PySide2"
        install.method: "pip"

  steps:

# windows set resolution
  - task: ScreenResolutionUtility@1
    inputs:
      displaySettings: 'specific'
      width: '1920'
      height: '1080'
    condition: eq(variables['agent.os'], 'Windows_NT' )

  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(python.version)
    condition: eq(variables['install.method'], 'pip')
  
# pip
  - bash: |
      pip install setuptools wheel
      pip install $(qt.bindings)
      pip install numpy scipy pyopengl pytest flake8 six coverage
      pip install pytest-azurepipelines pytest-xdist pytest-cov
    displayName: "Install Dependencies - pip"
    condition: eq(variables['install.method'], 'pip')

# xvfb - Linux
  - bash: |
      sudo apt-get install -y xvfb libxkbcommon-x11-0  # herbstluftwm
      pip install pytest-xvfb
    displayName: "Linux Virtual Display Setup - pip"
    condition: and(eq(variables['install.method'], 'pip'), eq(variables['agent.os'], 'Linux' ))
  
# pip
  - bash: |
      echo python location: `which python`
      echo python version: `python --version`
      echo pytest location: `which pytest`
      echo installed packages
      pip list
      echo pyqtgraph system info
      python -m pytest test.py -s
    displayName: 'Debug - pip'
    continueOnError: false
    condition: eq(variables['install.method'], 'pip' )

# pip
  - bash: | 
      python -m pytest -sv --junitxml=junit/test-results.xml --cov --cov-report=xml --cov-report=html:cov_html --test-run-title="$(Agent.OS) - Python $(python.version) - Install Method $(install.method)- Bindings $(qt.bindings)" --napoleon-docstrings
    displayName: 'Unittests - pip' 
    continueOnError: false
    env:
      DISPLAY: :99.0
    condition: eq(variables['install.method'], 'pip' )

# conda - windows
  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: 'Windows - Add conda to $PATH'
    condition: and(eq(variables['install.method'], 'conda' ), eq(variables['agent.os'], 'Windows_NT' ))

# conda - macOS
  - bash: |
      echo '##vso[task.prependpath]$CONDA/bin'
      # Fix Anaconda permissions
      sudo install -d -m 0777 /usr/local/miniconda/envs
    displayName: 'macOS - Add conda to $PATH'
    condition: and(eq(variables['install.method'], 'conda' ), eq(variables['agent.os'], 'Darwin' ))

# conda - linux
  - bash: echo '##vso[task.prependpath]/usr/share/miniconda/bin'
    displayName: 'Linux - Add conda to $PATH'
    condition: and(eq(variables['install.method'], 'conda' ), eq(variables['agent.os'], 'Linux' ))

# conda - create environment
  - task: CondaEnvironment@0
    displayName: 'Install Dependencies - conda' 
    condition: eq(variables['install.method'], 'conda')
    inputs:
      environmentName: 'test-environment-$(python.version)'
      packageSpecs: '-c conda-forge $(qt.bindings) numpy scipy pyopengl pytest flake8 six coverage python=$(python.version)'
  
  - bash: |
      sudo apt-get install -y xvfb libxkbcommon-x11-0
      source activate test-environment-$(python.version)
      pip install pytest-xvfb
    displayName: "Linux Virtual Display Setup - conda"
    condition: and(eq(variables['install.method'], 'conda'), eq(variables['agent.os'], 'Linux' ))

# conda - all
  - bash: |
      source activate test-environment-$(python.version)
      pip install pytest-azurepipelines pytest-xdist pytest-cov
    displayName: Install Dependencies - conda
    condition: eq(variables['install.method'], 'conda' )

# conda - all
  - bash: |
      source activate test-environment-$(python.version)
      echo python location: `which python`
      echo python version: `python --version`
      echo pytest location: `which pytest`
      echo installed packages
      conda list
      echo pyqtgraph system info
      python -m pytest test.py -s
    displayName: 'Debug - conda'
    continueOnError: false
    condition: eq(variables['install.method'], 'conda' )

# conda - all
  - bash: |
      source activate test-environment-$(python.version)
      python -m pytest -sv --junitxml=junit/test-results.xml --cov --cov-report=xml --cov-report=html:cov_html --test-run-title="$(Agent.OS) - Python$(python.version) - Install Method $(install.method)- Bindings $(qt.bindings)" --napoleon-docstrings
    displayName: 'Unittests - conda'
    continueOnError: false
    env:
      DISPLAY: :99.0
    condition: eq(variables['install.method'], 'conda' )

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit
      testResultsFiles: 'junit/test-results.xml'
      mergeTestResults: true # Optional
      publishRunAttachments: true # Optional
      testRunTitle: "$(Agent.OS) - Python $(python.version) - Install Method $(install.method)- Bindings $(qt.bindings)"

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/test-cov.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/cov_html'
